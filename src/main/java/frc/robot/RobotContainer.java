// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: RobotContainer.

package frc.robot;

import frc.robot.subsystems.*;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.InstantCommand;
import edu.wpi.first.wpilibj2.command.RepeatCommand;
import edu.wpi.first.wpilibj2.command.RunCommand;
import edu.wpi.first.cameraserver.CameraServer;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 * This class is where the bulk of the robot should be declared.  Since Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in the {@link Robot}
 * periodic methods (other than the scheduler calls).  Instead, the structure of the robot
 * (including subsystems, commands, and button mappings) should be declared here.
 */
public class RobotContainer {

  private static RobotContainer m_robotContainer = new RobotContainer();

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
// The robot's subsystems
    // public final Compressor2023 m_compressor2023 = new Compressor2023();
    //public final DriveTrain m_driveTrain = new DriveTrain();
    public final DriveBase m_driveBase = new DriveBase();
    public final Elevator m_elevator = new Elevator();
    public final Grabber m_grabber = new Grabber();
    // public final PneumaticArmCone m_pneumaticArmCone = new PneumaticArmCone();
    // public final PneumaticArmCube m_pneumaticArmCube = new PneumaticArmCube();
    // public final LadderAngle1 m_ladderAngle1 = new LadderAngle1();
    // public final LadderStage3 m_ladderStage3 = new LadderStage3();
    // public final LadderStage2 m_ladderStage2 = new LadderStage2();

// Joysticks
private final Joystick acquisitionJoystick = new Joystick(1);
private final Joystick driveJoystick = new Joystick(0);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

  
  // A chooser for autonomous commands
  SendableChooser<Command> m_chooser = new SendableChooser<>();

  /**
  * The container for the robot.  Contains subsystems, OI devices, and commands.
  */
  private RobotContainer() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Smartdashboard Subsystems
    // SmartDashboard.putData(m_compressor2023);
    SmartDashboard.putData(m_driveBase);
    SmartDashboard.putData(m_elevator);
    SmartDashboard.putData(m_grabber);
    // SmartDashboard.putData(m_pneumaticArmCone);
    // SmartDashboard.putData(m_pneumaticArmCube);
    // SmartDashboard.putData(m_ladderAngle1);
    // SmartDashboard.putData(m_ladderStage3);
    // SmartDashboard.putData(m_ladderStage2);


    // SmartDashboard Buttons
    // SmartDashboard.putData("LadderAngleChange", new LadderAngleChange());
    // SmartDashboard.putData("LadderStage2Change", new LadderStage2Change( m_ladderStage2 ));
    // SmartDashboard.putData("GetCube", new GetCube());
    // SmartDashboard.putData("GetCone", new GetCone());
    // // SmartDashboard.putData("DriveControl: joystick", new DriveControl(() -> geoystick().getDriveJoystick().getY(), () -> getDriveJoystick().getX()));
    // SmartDashboard.putData("LadderStage3Change", new LadderStage3Change());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Configure the button bindings
    configureButtonBindings();

    // Configure default commands
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND
    // m_driveTrain.setDefaultCommand(new DriveControl(() -> 0, () -> 0));
    m_driveBase.setDefaultCommand(new RepeatCommand(new InstantCommand(() -> m_driveBase.drive(-driveJoystick.getY(), -driveJoystick.getX()), m_driveBase)));
    // m_ladderStage2.setDefaultCommand(new LadderStage2Change( m_ladderStage2 ));


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND

    // Configure autonomous sendable chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    // m_chooser.addOption("LadderAngleChange", new LadderAngleChange());
    // m_chooser.addOption("GetCube", new GetCube());
    // m_chooser.addOption("DriveControl: joystick", new DriveControl(() -> geoystick().getDriveJoystick().getY(), () -> getDriveJoystick().getX()));
   // m_chooser.setDefaultOption("$command.getName()", new ${name.replace(' ', '')}( m_${name.substring(0,1).toLowerCase()}${name.substring(1).replace(' ', '')} ));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    SmartDashboard.putData("Auto Mode", m_chooser);

    CameraServer.startAutomaticCapture();
  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

  private double scale(double value) {
    return (value + 1.0) / 2.0;
  }

  /**
   * Use this method to define your button->command mappings.  Buttons can be created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */
  private void configureButtonBindings() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
// Create some buttons
final JoystickButton ladderAngleUp = new JoystickButton(acquisitionJoystick, 6);        
ladderAngleUp
  .onTrue(new RepeatCommand(new InstantCommand(() -> m_elevator.changeAngle(-0.6), m_elevator)))
  .onFalse(new InstantCommand(() -> m_elevator.changeAngle(0), m_elevator))
;

final JoystickButton ladderAngleDown = new JoystickButton(acquisitionJoystick, 4);        
ladderAngleDown
  .onTrue(new RepeatCommand(new InstantCommand(() -> m_elevator.changeAngle(0.6), m_elevator)))
  .onFalse(new InstantCommand(() -> m_elevator.changeAngle(0), m_elevator))
;

final JoystickButton elevatorExtendStage1 = new JoystickButton(acquisitionJoystick, 9);
elevatorExtendStage1
  .onTrue(new RunCommand(() -> m_elevator.moveStage1(0.2), m_elevator))
  .onFalse(new InstantCommand(() -> m_elevator.moveStage1(
    0), m_elevator))
;


final JoystickButton elevatorRetractStage1 = new JoystickButton(acquisitionJoystick, 11);        
elevatorRetractStage1
  .onTrue(new RepeatCommand(new InstantCommand(() -> m_elevator.moveStage1(-0.2), m_elevator)))
  .onFalse(new InstantCommand(() -> m_elevator.moveStage1(0), m_elevator))
;

final JoystickButton elevatorExtendStage2 = new JoystickButton(acquisitionJoystick, 10);        
elevatorExtendStage2
  .onTrue(new RepeatCommand(new InstantCommand(() -> m_elevator.moveStage2(0.2), m_elevator)))
  .onFalse(new InstantCommand(() -> m_elevator.moveStage2(0), m_elevator))
;


final JoystickButton elevatorRetractStage2 = new JoystickButton(acquisitionJoystick, 12);        
elevatorRetractStage2
  .onTrue(new RepeatCommand(new InstantCommand(() -> m_elevator.moveStage2(-0.2), m_elevator)))
  .onFalse(new InstantCommand(() -> m_elevator.moveStage2(0), m_elevator))
;

final JoystickButton grabberOpen = new JoystickButton(acquisitionJoystick, 1);        
grabberOpen
  .onTrue(new InstantCommand(() -> m_grabber.open(), m_grabber))
;
final JoystickButton grabberClose = new JoystickButton(acquisitionJoystick, 2);        
grabberClose
  .onTrue(new InstantCommand(() -> m_grabber.close(), m_grabber))
;

// final JoystickButton ladderStage3Out = new JoystickButton(acquisitionJoystick, 8);        
// ladderStage3Out.onTrue(new LadderStage3Change().withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        
// final JoystickButton ladderStage3In = new JoystickButton(acquisitionJoystick, 7);        
// ladderStage3In.onTrue(new LadderStage3Change().withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        
// final JoystickButton ladderStage2Out = new JoystickButton(acquisitionJoystick, 10);        
// ladderStage2Out.onTrue(new LadderStage2Change( m_ladderStage2 ).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        
// final JoystickButton ladderStage2In = new JoystickButton(acquisitionJoystick, 9);        
// ladderStage2In.onTrue(new LadderStage2Change( m_ladderStage2 ).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        
// final JoystickButton ladderAngleUp = new JoystickButton(acquisitionJoystick, 11);        
// ladderAngleUp.onTrue(new LadderAngleChange().withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        
 //final JoystickButton cube = new JoystickButton(acquisitionJoystick, 4);        
 //cube.onTrue(new GetCube().withInterruptBehavior(InterruptionBehavior.kCancelSelf));
 //                        SmartDashboard.putData("Cube",new GetCube());
                        
//final JoystickButton cone = new JoystickButton(acquisitionJoystick, 3);        
//cone.onTrue(new GetCone().withInterruptBehavior(InterruptionBehavior.kCancelSelf));
 //                       SmartDashboard.putData("Cone",new GetCone());
                        
// final JoystickButton driveControlButton = new JoystickButton(driveJoystick, 1);        
// driveControlButton.onTrue(new DriveControl().withInterruptBehavior(InterruptionBehavior.kCancelSelf));
//                         SmartDashboard.putData("Drive Control Button",new DriveControl());
                        


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
  }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
// public Joystick getDriveJoystick() {
//         return driveJoystick;
//     }

// public Joystick getAcquisitionJoystick() {
//         return acquisitionJoystick;
//     }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
  */
  public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
    return m_chooser.getSelected();
  }
  

}


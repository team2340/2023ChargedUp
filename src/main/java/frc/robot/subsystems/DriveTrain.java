// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.motorcontrol.MotorController;
import edu.wpi.first.wpilibj.motorcontrol.MotorControllerGroup;
import edu.wpi.first.wpilibj.motorcontrol.PWMTalonSRX;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class DriveTrain extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private PWMTalonSRX frontLeft;
private PWMTalonSRX rearLeft;
private MotorControllerGroup motorControllerLeft;
private PWMTalonSRX frontRight;
private PWMTalonSRX rearRight;
private MotorControllerGroup motorControllerRight;
private DifferentialDrive differentialDrive1;
private AnalogGyro analogGyro1;
private Encoder quadratureEncoderRight;
private Encoder quadratureEncoderLeft;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public DriveTrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
frontLeft = new PWMTalonSRX(1);
 addChild("frontLeft",frontLeft);
 frontLeft.setInverted(false);

rearLeft = new PWMTalonSRX(0);
 addChild("rearLeft",rearLeft);
 rearLeft.setInverted(false);

motorControllerLeft = new MotorControllerGroup(frontLeft, rearLeft  );
 addChild("MotorControllerLeft",motorControllerLeft);
 

frontRight = new PWMTalonSRX(18);
 addChild("frontRight",frontRight);
 frontRight.setInverted(true);

rearRight = new PWMTalonSRX(19);
 addChild("rearRight",rearRight);
 rearRight.setInverted(true);

motorControllerRight = new MotorControllerGroup(frontRight, rearRight  );
 addChild("MotorControllerRight",motorControllerRight);
 

differentialDrive1 = new DifferentialDrive(motorControllerLeft, frontLeft);
 addChild("Differential Drive 1",differentialDrive1);
 differentialDrive1.setSafetyEnabled(true);
differentialDrive1.setExpiration(0.1);
differentialDrive1.setMaxOutput(1.0);


analogGyro1 = new AnalogGyro(0);
 addChild("AnalogGyro 1",analogGyro1);
 analogGyro1.setSensitivity(0.007);

quadratureEncoderRight = new Encoder(8, 9, true, EncodingType.k4X);
 addChild("Quadrature Encoder Right",quadratureEncoderRight);
 quadratureEncoderRight.setDistancePerPulse(1.0);

quadratureEncoderLeft = new Encoder(6, 7, false, EncodingType.k4X);
 addChild("Quadrature Encoder Left",quadratureEncoderLeft);
 quadratureEncoderLeft.setDistancePerPulse(1.0);


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        // m_robotDrive.arcadeDrive(-m_stick.getY(), -m_stick.getX());
    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation
      // Drive with arcade drive.
      // That means that the Y axis drives forward
      // and backward, and the X turns left and right.
      
    }
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    // Called once the command ends or is interrupted.
    // @Override
    // public void end(boolean interrupted) {
    //     m_robotDrive.arcadeDrive(0.0, 0.0);
    // }

}

